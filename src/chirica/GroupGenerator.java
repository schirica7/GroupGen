package chirica;

import java.io.*;
import java.util.*;
import javax.swing.*;

/*
To do:
1. Remove stars from the new list but not the permanent list
2. Maybe add a save feature?
3. 

 */
/**
 * Project summary: a group generator that allows you to single out items as
 * well as import a list of items with a .txt file .
 *
 * This project was created for educational purposes. Copyright (c) 2022. All
 * rights reserved.
 *
 * @author Stefan Chirica
 */
public class GroupGenerator extends javax.swing.JFrame {

    static ArrayList<Student> ITEMS = new ArrayList<>();
    Random rNumber = new Random();

    /**
     * Creates new form GroupGenerator
     */
    public GroupGenerator() {
        initComponents();
        bottomButton.setVisible(false);
        backButton.setVisible(false);
        thirdButton.setVisible(false);
        this.setSize(466, 170);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        topButton = new javax.swing.JButton();
        secondButton = new javax.swing.JButton();
        bottomButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        thirdButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Random Group Generator");

        topButton.setText("Read from .txt file");
        topButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topButtonActionPerformed(evt);
            }
        });

        secondButton.setText("Manually enter group items");
        secondButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondButtonActionPerformed(evt);
            }
        });

        bottomButton.setText("jButton1");
        bottomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottomButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        thirdButton.setText("Delete Items");
        thirdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thirdButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(121, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(backButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(secondButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bottomButton, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                    .addComponent(topButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(thirdButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(129, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {backButton, bottomButton, secondButton, thirdButton, topButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(topButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(secondButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(thirdButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bottomButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(backButton)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Does various things to the top GUI button depending on the text it shows
     *
     * @param evt - ActionEvent to see if it is clicked
     */
    private void topButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topButtonActionPerformed

        switch (topButton.getText()) {
            case "Add Items":
                String newItemName = (String) JOptionPane.showInputDialog(this,
                        "Please enter a new item. If you want to single anything \nout, "
                        + "type '*' before the item name.", "New Item",
                        JOptionPane.PLAIN_MESSAGE,
                        null,
                        null,
                        "Please enter your items here.");

                //If a string was returned, say so.      
                if ((newItemName != null) && (newItemName.length() > 0) ) {
                    //boolean poopEnabled = poopButton.isEnabled();
                    ITEMS.add(new Student(newItemName));
                    System.out.println(ITEMS);
                } else if ((newItemName != null)) {
                    JOptionPane.showMessageDialog(this,
                            "Please put something in!",
                            "Input Error!", JOptionPane.ERROR_MESSAGE);

                } 

                break;
            case "Read from .txt file":
                JFileChooser fileChooser = new JFileChooser();

                if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                    File fileName = new File(fileChooser.getSelectedFile().getAbsolutePath()); //maybe change to dialog
                    String filePath = fileName.getAbsolutePath();
                    String studentName = null;

                    if (!filePath.endsWith(".txt")) {
                        JOptionPane.showMessageDialog(this,
                                "Please put in a text file (.txt)!",
                                "Input Error!", JOptionPane.ERROR_MESSAGE);
                    } else {

                        try {
                            FileReader fileReader = new FileReader(fileName);
                            BufferedReader bufferedReader = new BufferedReader(fileReader);  // Read whole line at once
                            while ((studentName = bufferedReader.readLine()) != null) {   // Loops until no more lines in txt file
                                ITEMS.add(new Student(studentName));      // Do whatever you need to do with each "line" here
                            }
                            bufferedReader.close();  		// Always close!!
                            fileReader.close();  		// Always close!!

                            this.setSize(466, 283);
                            titleLabel.setText("Imported Items");
                            topButton.setText("Add Items");
                            secondButton.setText("View Items");

                            thirdButton.setVisible(true);
                            thirdButton.setText("Delete Items");

                            bottomButton.setVisible(true);
                            bottomButton.setText("Submit");

                            backButton.setVisible(true);
                        } catch (FileNotFoundException ex) {
                            System.out.println("Unable to find file '" + fileName + "'");
                        } catch (IOException ex) {
                            System.out.println("Error reading file '" + fileName + "'");
                        } catch (Exception ex) {
                            System.err.println(ex);
                        }   // Make sure to use the above catch statements!
                    }

                    System.out.println(fileName);
                    break;
                }

        }
    }//GEN-LAST:event_topButtonActionPerformed

    /**
     * Does various things to the center GUI button depending on the text it
     * shows
     *
     * @param evt - ActionEvent to see if it is clicked
     */
    private void secondButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondButtonActionPerformed
        backButton.setVisible(true);

        switch (secondButton.getText()) {
            case "Manually enter group items":
                this.setSize(466, 283);
                titleLabel.setText("Manually Enter Group Items");
                topButton.setText("Add Items");
                secondButton.setText("View Items");

                bottomButton.setVisible(true);
                bottomButton.setText("Submit");

                thirdButton.setVisible(true);
                thirdButton.setText("Delete Items");

                break;
            case "View Items":
                ItemsList listDialog = new ItemsList(this, true, ITEMS);

                for (int i = 0; i < ITEMS.size(); i++) {
                    if (ITEMS.get(i).getIsStarred() && ITEMS.get(i).getName().charAt(0) != '*') {
                        ITEMS.get(i).setName("*" + ITEMS.get(i).getName());
                    }
                }
                listDialog.setVisible(true);
                break;

        }

    }//GEN-LAST:event_secondButtonActionPerformed

    /**
     * Does various things to the bottom GUI button depending on the text it
     * shows
     *
     * @param evt - ActionEvent to see if it is clicked
     */
    private void bottomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottomButtonActionPerformed
        int starredPeople = 0;
        backButton.setVisible(true);

        for (int i = 0; i < ITEMS.size(); i++) {
            if (ITEMS.get(i).getIsStarred()) {
                starredPeople++;
                System.out.println(starredPeople);
            }
        }
        switch (bottomButton.getText()) {
            case "Submit":
                if (ITEMS.size() > 2) {

                    SpinnerNumberModel spinnerModel
                            = new SpinnerNumberModel(2,
                                    2, (ITEMS.size()) / 2, 1);

                    JSpinner spinner = new JSpinner(spinnerModel);

                    int groups = JOptionPane.showOptionDialog(this,
                            spinner, "Please pick a number of groups.",
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            null,
                            2);

                    if (groups == JOptionPane.OK_OPTION) {
                        int groupAmount = (int) spinner.getValue();
//                        ArrayList<Student> duplicateItems = new ArrayList<>();
//
//                        for (int i = 0; i < ITEMS.size(); i++) {
//                            duplicateItems.add(ITEMS.get(i));
//                        }

                        System.out.println(groupAmount);
                        if (starredPeople > groupAmount) {
                            JOptionPane.showMessageDialog(this,
                                    "If you want to single people out, make sure there are enough groups to do so!",
                                    "Input Error!", JOptionPane.ERROR_MESSAGE);
                        } else {
                            Groups groupDialog = new Groups(this, true, ITEMS, groupAmount);
                            groupDialog.setVisible(true);
                        }

                    }
                } else if (ITEMS.size() == 2) {
                    JOptionPane.showMessageDialog(this,
                            "You can't only have groups with just one item in them!",
                            "Input Error!", JOptionPane.ERROR_MESSAGE);
                } else if (ITEMS.size() == 1) {
                    JOptionPane.showMessageDialog(this,
                            "You can't make a group out of just one item!",
                            "Input Error!", JOptionPane.ERROR_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "You need items to create groups!",
                            "Input Error!", JOptionPane.ERROR_MESSAGE);
                }
                break;
        }
    }//GEN-LAST:event_bottomButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // Based off of the text of the center button, goes back to the previous screen

        switch (secondButton.getText()) {
            case "View Items":
                titleLabel.setText("Random Group Generator");
                topButton.setText("Read from .txt file");
                secondButton.setText("Manually enter group items");
                this.setSize(466, 170);
                bottomButton.setVisible(false);
                backButton.setVisible(false);

                ITEMS = new ArrayList<>();
        }
    }//GEN-LAST:event_backButtonActionPerformed

    private void thirdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thirdButtonActionPerformed
        switch (thirdButton.getText()) {
            case "Delete Items":
                if (ITEMS.size() > 0) {
                    Object[] possibilities = new Object[ITEMS.size()];
                    int index = 0;

                    for (Student student : ITEMS) {
                        possibilities[index] = student.getName();
                        index++;
                    }

                    String studentName = (String) JOptionPane.showInputDialog(
                            this,
                            "Select an item from the list below to delete",
                            "Delete Item",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            possibilities,
                            possibilities[0]);

                    if (studentName != null) {
                        if (ITEMS.size() >= 1) {
                            for (int i = 0; i < ITEMS.size(); i++) {
                                if (studentName.equals(ITEMS.get(i).getName())) {
                                    ITEMS.remove(i);
                                }
                            }
                        }
                    }

                } else {
                    JOptionPane.showMessageDialog(this,
                            "There aren't any items to delete!",
                            "Input Error!", JOptionPane.ERROR_MESSAGE);
                }
                break;
        }
    }//GEN-LAST:event_thirdButtonActionPerformed

    public static ArrayList<Student> getItems() {
        return ITEMS;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GroupGenerator.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GroupGenerator.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GroupGenerator.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GroupGenerator.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GroupGenerator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton bottomButton;
    private javax.swing.JButton secondButton;
    private javax.swing.JButton thirdButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton topButton;
    // End of variables declaration//GEN-END:variables

}
